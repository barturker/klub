story:
  id: "STORY-011"
  title: "Order Management & Refunds"
  epic: "3 - Events & Ticketing System"
  priority: "P1-High"
  points: 4
  sprint: "3"
  status: "in_progress"
  assigned_to: "ai-developer"
  created_date: "2025-01-17"
  start_date: "2025-01-20"
  completion_date: ""

user_story:
  as_a: "community organizer"
  i_want: "to manage ticket orders and process refunds"
  so_that: "I can handle customer service issues"

acceptance_criteria:
  - given: "I am an event organizer"
    when: "I access order management"
    then: "I see order dashboard with filter and search capabilities"
  - given: "I view an order"
    when: "I open order details"
    then: "I see purchaser info, tickets, and payment status"
  - given: "A customer requests refund"
    when: "I process refund"
    then: "I can issue full or partial refund with reason"
  - given: "Refund policy exists"
    when: "Processing refund"
    then: "Policy is enforced (deadline, fees)"
  - given: "An order needs modification"
    when: "Customer requests change"
    then: "I can upgrade, downgrade, or transfer tickets"
  - given: "An event is cancelled"
    when: "Cancellation triggered"
    then: "All orders are automatically refunded"
  - given: "I need financial records"
    when: "I export orders"
    then: "I can export order history for accounting"
  - given: "Order changes occur"
    when: "Any modification happens"
    then: "Email notifications are sent to customers"

technical_specification:
  fee_management_system:
    description: "Dynamic platform fee management with admin dashboard"
    tables:
      - platform_settings: "Stores configurable platform settings (fees, policies)"
      - fee_tiers: "Progressive fee tiers based on ticket price ranges"
      - payout_schedules: "Different payout timing options with fee adjustments"
      - platform_admins: "Role-based admin access management"
      - audit_logs: "Track all fee and settings changes for compliance"
    fee_calculation:
      buyer_pays_model: "Transparent fees - buyer sees and pays fees on top of ticket price"
      formula: |
        # Example: $50 ticket (all amounts in cents for precision)
        ticket_price = 5000  # $50.00 ticket base price
        platform_fee = ticket_price * 0.059 + 99  # 5.9% + $0.99 = $3.94
        buyer_total = ticket_price + platform_fee  # $53.94 total charged to buyer

        # Stripe fees (2.9% + $0.30 on the total transaction)
        stripe_fee = Math.ceil(buyer_total * 0.029) + 30  # Round up: 157 + 30 = 187 cents ($1.87)

        # Using Stripe destination charges model:
        # - Organizer receives full ticket price directly
        # - Platform receives platform fee
        # - Stripe deducts their fee from the platform's portion
        organizer_net = ticket_price  # Organizer gets full $50.00
        platform_net = platform_fee - stripe_fee  # Platform keeps $3.94 - $1.87 = $2.07
    fee_tiers_example:
      - micro: "$0-10: 7.9% + $0.50"
      - small: "$10-50: 6.9% + $0.75"
      - medium: "$50-200: 5.9% + $0.99"
      - large: "$200-1000: 4.9% + $1.49"
      - premium: "$1000+: 3.9% + $1.99"
    payout_options:
      - instant: "Same day payout with $3 extra fee"
      - daily: "Next day payout with 0.5% fee discount"
      - weekly: "Weekly payout with 1% fee discount (default)"
      - after_event: "After event completion with 2% fee discount"

  database_changes:
    - table: "refunds"
      changes: |
        CREATE TABLE refunds (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          order_id UUID REFERENCES orders(id) ON DELETE CASCADE NOT NULL,
          stripe_refund_id TEXT UNIQUE,
          amount_cents INTEGER NOT NULL,
          reason TEXT CHECK (reason IN ('requested_by_customer', 'duplicate', 'fraudulent', 'event_cancelled', 'other')),
          reason_details TEXT,
          status TEXT CHECK (status IN ('pending', 'processing', 'succeeded', 'failed', 'cancelled')) DEFAULT 'pending',
          processed_by UUID REFERENCES auth.users,
          metadata JSONB DEFAULT '{}',
          created_at TIMESTAMPTZ DEFAULT NOW(),
          processed_at TIMESTAMPTZ,
          updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_refunds_order ON refunds(order_id);
        CREATE INDEX idx_refunds_stripe ON refunds(stripe_refund_id);
        CREATE INDEX idx_refunds_status ON refunds(status);

    - table: "order_modifications"
      changes: |
        CREATE TABLE order_modifications (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          order_id UUID REFERENCES orders(id) ON DELETE CASCADE NOT NULL,
          type TEXT CHECK (type IN ('upgrade', 'downgrade', 'transfer', 'cancel', 'modify')) NOT NULL,
          old_values JSONB NOT NULL,
          new_values JSONB NOT NULL,
          price_difference_cents INTEGER DEFAULT 0,
          reason TEXT,
          modified_by UUID REFERENCES auth.users NOT NULL,
          created_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_order_mods_order ON order_modifications(order_id);

    - table: "refund_policies"
      changes: |
        CREATE TABLE refund_policies (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          event_id UUID REFERENCES events(id) ON DELETE CASCADE UNIQUE NOT NULL,
          deadline_hours INTEGER DEFAULT 24, -- hours before event
          refund_percentage INTEGER DEFAULT 100, -- percentage refundable
          no_refund_after TIMESTAMPTZ,
          allow_transfers BOOLEAN DEFAULT TRUE,
          transfer_deadline_hours INTEGER DEFAULT 6,
          cancellation_policy TEXT,
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_refund_policies_event ON refund_policies(event_id);

    - table: "order_exports"
      changes: |
        CREATE TABLE order_exports (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          community_id UUID REFERENCES communities(id) ON DELETE CASCADE NOT NULL,
          event_id UUID REFERENCES events(id) ON DELETE CASCADE,
          export_type TEXT CHECK (export_type IN ('csv', 'excel', 'pdf')) DEFAULT 'csv',
          date_range_start TIMESTAMPTZ,
          date_range_end TIMESTAMPTZ,
          file_url TEXT,
          status TEXT CHECK (status IN ('pending', 'processing', 'completed', 'failed')) DEFAULT 'pending',
          requested_by UUID REFERENCES auth.users NOT NULL,
          created_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_exports_community ON order_exports(community_id);

        -- RLS Policies
        ALTER TABLE refunds ENABLE ROW LEVEL SECURITY;
        ALTER TABLE order_modifications ENABLE ROW LEVEL SECURITY;
        ALTER TABLE refund_policies ENABLE ROW LEVEL SECURITY;
        ALTER TABLE order_exports ENABLE ROW LEVEL SECURITY;

        -- Refund policies
        CREATE POLICY "Event managers can manage refunds"
        ON refunds FOR ALL
        USING (
          EXISTS (
            SELECT 1 FROM orders o
            JOIN events e ON e.id = o.event_id
            JOIN community_members cm ON cm.community_id = e.community_id
            WHERE o.id = refunds.order_id
            AND cm.user_id = auth.uid()
            AND cm.role IN ('admin', 'moderator')
          )
        );

        -- Order modification policies
        CREATE POLICY "Event managers can modify orders"
        ON order_modifications FOR ALL
        USING (
          EXISTS (
            SELECT 1 FROM orders o
            JOIN events e ON e.id = o.event_id
            JOIN community_members cm ON cm.community_id = e.community_id
            WHERE o.id = order_modifications.order_id
            AND cm.user_id = auth.uid()
            AND cm.role IN ('admin', 'moderator')
          )
        );

        -- Function to process refund
        CREATE OR REPLACE FUNCTION process_refund(
          p_order_id UUID,
          p_amount_cents INTEGER,
          p_reason TEXT,
          p_reason_details TEXT DEFAULT NULL
        ) RETURNS UUID AS $$
        DECLARE
          v_refund_id UUID;
          v_ticket_ids UUID[];
        BEGIN
          -- Create refund record
          INSERT INTO refunds (
            order_id,
            amount_cents,
            reason,
            reason_details,
            processed_by
          ) VALUES (
            p_order_id,
            p_amount_cents,
            p_reason,
            p_reason_details,
            auth.uid()
          ) RETURNING id INTO v_refund_id;

          -- Update order status
          UPDATE orders
          SET status = CASE
            WHEN p_amount_cents >= amount_cents THEN 'refunded'
            ELSE 'partially_refunded'
          END,
          refunded_at = NOW()
          WHERE id = p_order_id;

          -- Cancel associated tickets
          UPDATE tickets
          SET status = 'refunded'
          WHERE order_id = p_order_id
          AND status = 'valid';

          RETURN v_refund_id;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;

        -- Function to bulk refund for cancelled event
        CREATE OR REPLACE FUNCTION refund_cancelled_event(p_event_id UUID)
        RETURNS INTEGER AS $$
        DECLARE
          v_refund_count INTEGER := 0;
          v_order RECORD;
        BEGIN
          FOR v_order IN
            SELECT id, amount_cents
            FROM orders
            WHERE event_id = p_event_id
            AND status IN ('completed', 'pending')
          LOOP
            PERFORM process_refund(
              v_order.id,
              v_order.amount_cents,
              'event_cancelled',
              'Event was cancelled by organizer'
            );
            v_refund_count := v_refund_count + 1;
          END LOOP;

          RETURN v_refund_count;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;

  api_endpoints:
    - method: "GET"
      path: "/api/orders"
      purpose: "List orders with filters"
      query_params:
        event_id: "uuid?"
        community_id: "uuid?"
        status: "string?"
        search: "string?"
        date_from: "timestamp?"
        date_to: "timestamp?"
        limit: "number?"
        offset: "number?"
      response:
        orders: "array"
        total: "number"
        stats: "object"
    - method: "GET"
      path: "/api/orders/[id]"
      purpose: "Get order details"
      response:
        order: "object"
        tickets: "array"
        refunds: "array"
        modifications: "array"
    - method: "POST"
      path: "/api/orders/[id]/refund"
      purpose: "Process refund"
      request_body:
        amount_cents: "number?"
        reason: "string"
        reason_details: "string?"
        notify_customer: "boolean"
      response:
        refund_id: "uuid"
        stripe_refund_id: "string"
        status: "string"
    - method: "POST"
      path: "/api/orders/[id]/modify"
      purpose: "Modify order"
      request_body:
        type: "string"
        new_ticket_tier_id: "uuid?"
        new_quantity: "number?"
        transfer_to_email: "string?"
      response:
        success: "boolean"
        order: "object"
        price_difference: "number?"
    - method: "POST"
      path: "/api/events/[id]/cancel"
      purpose: "Cancel event and refund all"
      request_body:
        reason: "string"
        notify_attendees: "boolean"
      response:
        refunds_processed: "number"
        total_refunded_cents: "number"
    - method: "POST"
      path: "/api/orders/export"
      purpose: "Export orders"
      request_body:
        event_id: "uuid?"
        community_id: "uuid?"
        date_from: "timestamp?"
        date_to: "timestamp?"
        format: "string"
        columns: "array?"
      response:
        export_id: "uuid"
        status: "string"
    - method: "GET"
      path: "/api/exports/[id]/download"
      purpose: "Download export file"
      response: "File download"
    - method: "GET"
      path: "/api/orders/[id]/invoice"
      purpose: "Generate invoice PDF"
      response:
        invoice_url: "string"
    - method: "POST"
      path: "/api/refund-policies"
      purpose: "Set refund policy"
      request_body:
        event_id: "uuid"
        deadline_hours: "number"
        refund_percentage: "number"
        no_refund_after: "timestamp?"
        allow_transfers: "boolean"
        cancellation_policy: "string?"
      response:
        policy: "object"

  components:
    - name: "OrderList"
      type: "component"
      path: "/components/orders/OrderList.tsx"
      purpose: "Display orders with TanStack Table"
    - name: "OrderDetails"
      type: "component"
      path: "/components/orders/OrderDetails.tsx"
      purpose: "Show detailed order information"
    - name: "RefundModal"
      type: "component"
      path: "/components/orders/RefundModal.tsx"
      purpose: "Process refund with reason"
    - name: "OrderModificationForm"
      type: "component"
      path: "/components/orders/OrderModificationForm.tsx"
      purpose: "Modify order details"
    - name: "BulkRefundConfirmation"
      type: "component"
      path: "/components/orders/BulkRefundConfirmation.tsx"
      purpose: "Confirm event cancellation refunds"
    - name: "OrderExportDialog"
      type: "component"
      path: "/components/orders/OrderExportDialog.tsx"
      purpose: "Configure export parameters"
    - name: "RefundPolicyForm"
      type: "component"
      path: "/components/orders/RefundPolicyForm.tsx"
      purpose: "Set event refund policy"
    - name: "OrderStats"
      type: "component"
      path: "/components/orders/OrderStats.tsx"
      purpose: "Display order statistics"
    - name: "InvoiceGenerator"
      type: "component"
      path: "/components/orders/InvoiceGenerator.tsx"
      purpose: "Generate invoice PDFs with React-PDF"
    - name: "OrderTimeline"
      type: "component"
      path: "/components/orders/OrderTimeline.tsx"
      purpose: "Show order history timeline with Luxon dates"
    - name: "useOrdersStore"
      type: "hook"
      path: "/hooks/useOrdersStore.ts"
      purpose: "Zustand store for order filters and selection"
    - name: "useOrders"
      type: "hook"
      path: "/hooks/useOrders.ts"
      purpose: "TanStack Query hooks for order data"
    - name: "useRefunds"
      type: "hook"
      path: "/hooks/useRefunds.ts"
      purpose: "Refund processing with Dinero.js calculations"
    - name: "OrdersPage"
      type: "page"
      path: "/app/(dashboard)/communities/[slug]/orders/page.tsx"
      purpose: "Order management dashboard"
    - name: "OrderDetailsPage"
      type: "page"
      path: "/app/(dashboard)/orders/[id]/page.tsx"
      purpose: "Individual order details page"
    - name: "RefundPoliciesPage"
      type: "page"
      path: "/app/(dashboard)/communities/[slug]/events/[eventSlug]/policies/page.tsx"
      purpose: "Manage event policies"

  libraries_required:
    - name: "luxon"
      version: "^3.4.4"
      purpose: "Date/timezone handling for order timestamps"
    - name: "@tanstack/react-table"
      version: "^8.21.3"
      purpose: "Advanced data table for order management"
    - name: "@tanstack/react-query"
      version: "^5.28.4"
      purpose: "Data fetching and caching for orders"
    - name: "zustand"
      version: "^4.5.2"
      purpose: "Client-side state for order filters and selection"
    - name: "@react-pdf/renderer"
      version: "^3.4.4"
      purpose: "React-based PDF invoice generation"
    - name: "xlsx"
      version: "^0.18.5"
      purpose: "Lightweight Excel export for accounting"
    - name: "dinero.js"
      version: "^1.9.1"
      purpose: "Precise monetary calculations (using stable v1 instead of alpha v2)"
    - name: "react-hook-form"
      version: "^7.62.0"
      purpose: "Form handling (already installed)"
    - name: "zod"
      version: "^4.1.7"
      purpose: "Schema validation (already installed)"

implementation_plan:
  estimated_hours: 8
  phases:
    - phase: "Database Setup"
      tasks:
        - [x] Create refunds table (migration 00048)
        - [x] Create order_modifications table (migration 00048)
        - [x] Create refund_policies table (migration 00048)
        - [x] Create order_exports table (migration 00048)
        - [x] Create platform_settings table (migration 00049)
        - [x] Create fee_tiers table with progressive pricing (migration 00050)
        - [x] Create payout_schedules table (migration 00050)
        - [x] Create platform_admins table for secure role management (migration 00050)
        - [x] Create audit_logs table for compliance (migration 00050)
        - [x] Set up RLS policies for all tables
        - [x] Create refund functions (process_refund, refund_cancelled_event)
        - [x] Create fee calculation function (calculate_platform_fee)
        - [x] Create migration 00051 to drop duplicate ticket_orders table
    - phase: "Order Management UI"
      tasks:
        - [ ] Build order list with TanStack Table
        - [ ] Create order details view with timeline
        - [ ] Add search with Zustand filter state
        - [ ] Implement server-side pagination with TanStack Query
    - phase: "Refund Processing"
      tasks:
        - [ ] Create refund modal with React Hook Form
        - [ ] Integrate with Stripe refunds API
        - [ ] Handle partial refunds with Dinero.js
        - [ ] Update ticket status with optimistic updates
        - [ ] Calculate refund amounts considering platform fees
        - [ ] Handle fee refunds to buyers
    - phase: "Order Modifications"
      tasks:
        - [ ] Build modification form with Zod validation
        - [ ] Handle upgrades/downgrades with price recalculation
        - [ ] Implement ticket transfers with email validation
        - [ ] Calculate price differences using Dinero.js
    - phase: "Bulk Operations"
      tasks:
        - [ ] Event cancellation flow
        - [ ] Bulk refund processing
        - [ ] Progress tracking
        - [ ] Email notifications
    - phase: "Export & Reporting"
      tasks:
        - [ ] Create export dialog with date range selection using Luxon
        - [ ] Generate CSV exports with native browser APIs
        - [ ] Generate Excel exports with xlsx library
        - [ ] Create invoice PDFs with React-PDF renderer
    - phase: "Fee Management Dashboard"
      tasks:
        - [ ] Create admin dashboard for fee configuration
        - [ ] Build fee tier management UI
        - [ ] Implement payout schedule configuration
        - [ ] Add audit log viewer
        - [ ] Create platform admin role management
    - phase: "Checkout UI Updates"
      tasks:
        - [ ] Show transparent fee breakdown at checkout
        - [ ] Display platform fee and processing fee separately
        - [ ] Show total amount buyer will pay
        - [ ] Add payout timing selection for organizers
    - phase: "Testing"
      tasks:
        - [ ] Test refund flows with fee calculations
        - [ ] Test order modifications
        - [ ] Test export generation
        - [ ] Test bulk operations
        - [ ] Test dynamic fee tier application
        - [ ] Verify fee calculation accuracy

dependencies:
  blocking: ["STORY-010"]
  blocked_by: []
  external: ["Stripe Refund API", "Stripe Destination Charges API"]

test_scenarios:
  unit_tests:
    - component: "RefundCalculator"
      test: "Apply refund policy"
      expected: "Correct refund amount based on policy"
    - component: "ExportGenerator"
      test: "Generate CSV with filters"
      expected: "Correct data in proper format"
  integration_tests:
    - scenario: "Process full refund"
      steps:
        - "Select order"
        - "Initiate refund"
        - "Provide reason"
        - "Confirm refund"
      expected: "Refund processed, tickets cancelled"
    - scenario: "Bulk refund for cancelled event"
      steps:
        - "Cancel event"
        - "Confirm bulk refund"
        - "Monitor progress"
      expected: "All orders refunded, notifications sent"
  edge_cases:
    - scenario: "Refund after policy deadline"
      steps:
        - "Attempt refund past deadline"
      expected: "Refund blocked or reduced per policy"
    - scenario: "Modify sold-out tier"
      steps:
        - "Try to upgrade to sold-out tier"
      expected: "Modification blocked with appropriate message"

performance_requirements:
  - metric: "Order list loading"
    target: "<500ms for 100 orders"
  - metric: "Refund processing"
    target: "<2s including Stripe"
  - metric: "Export generation"
    target: "<5s for 1000 orders"

security_considerations:
  - aspect: "Authorization"
    requirement: "Only event managers can process refunds"
  - aspect: "Platform Admin Access"
    requirement: "Role-based admin management via platform_admins table"
  - aspect: "Audit trail"
    requirement: "Log all modifications, refunds, and fee changes in audit_logs"
  - aspect: "Double refund prevention"
    requirement: "Prevent duplicate refund requests with unique constraints"
  - aspect: "Export access"
    requirement: "Secure download links with expiration"
  - aspect: "Fee Calculation Integrity"
    requirement: "Server-side fee calculation with validation"
  - aspect: "Webhook Security"
    requirement: "STRIPE_WEBHOOK_SECRET must be configured in production"

definition_of_done:
  development:
    - [ ] Code complete and follows standards
    - [ ] TypeScript types defined
    - [ ] Error handling implemented
    - [ ] Loading states implemented
    - [ ] Mobile responsive
  testing:
    - [ ] Unit tests written and passing
    - [ ] Integration tests passing
    - [ ] Manual testing completed
    - [ ] Cross-browser testing done
  documentation:
    - [ ] Code comments added
    - [ ] API documentation updated
    - [ ] Refund policy guide created
  review:
    - [ ] Code reviewed and approved
    - [ ] Design reviewed (UI/UX)
    - [ ] Security review passed
  deployment:
    - [ ] Deployed to staging
    - [ ] QA tested and approved
    - [ ] Product Owner accepted
    - [ ] No P0 or P1 bugs

rollback_plan:
  - step: "Disable refund UI"
  - step: "Stop refund processing"
  - step: "Revert database changes"
  - step: "Notify support team"

monitoring:
  metrics_to_track:
    - "Refund rate by event"
    - "Average refund processing time"
    - "Order modification frequency"
    - "Export generation success rate"
  alerts_to_setup:
    - "Refund failures > 5%"
    - "Bulk refund job stuck > 10min"
    - "Export generation failures > 10%"
  logs_to_implement:
    - "All refund attempts and results"
    - "Order modifications with reasons"
    - "Export generation requests"
    - "Policy enforcement decisions"

dev_notes:
  implementation_tips:
    - "Use database transactions for refunds to ensure consistency"
    - "Implement queue for bulk refund processing"
    - "Cache order data for performance"
    - "Stream large exports to avoid memory issues"
    - "Use Stripe webhooks to confirm refund completion"
  tech_stack_references:
    - "Stripe refund API [Source: Stripe docs]"
    - "Stripe Connect Destination Charges [Source: Stripe docs]"
    - "Next.js API routes [Source: architecture/tech-stack.md]"
    - "Supabase RLS policies [Source: architecture/supabase-database-schema.md]"
    - "React Hook Form for forms [Source: architecture/tech-stack.md]"
    - "PostgreSQL EXCLUDE constraints for preventing overlaps"
    - "JSONB for flexible settings storage"
  database_references:
    - "Orders table from STORY-010 (NOTE: ticket_orders is duplicate and should be dropped)"
    - "Events and tickets tables from previous stories"
    - "Atomic operations with transactions [Source: architecture/supabase-database-schema.md]"
    - "Platform settings and fee tiers for dynamic pricing"
    - "Audit logs for compliance tracking"
  previous_story_context:
    - "Stripe integration (STORY-010) provides payment infrastructure"
    - "Order creation flow established"
    - "Ticket generation process defined"
  refund_policy_notes:
    - "Default: 100% refund up to 24 hours before event"
    - "Support partial refunds for flexibility"
    - "Automatic refunds for cancelled events"
    - "Transfer option as alternative to refund"
  potential_issues:
    - "Stripe refund delays - handle async updates"
    - "Large export memory usage - use streaming"
    - "Concurrent modifications - use optimistic locking"
    - "Email delivery - implement retry queue"
    - "Fee calculation precision - use INTEGER cents to avoid floating point issues"
    - "Critical: Organizer must receive full ticket price in destination charge model"
    - "Fee tier overlaps - prevented with EXCLUDE constraints"
    - "Admin role security - use platform_admins table not hardcoded emails"
  references:
    - "Stripe Refund API documentation"
    - "Stripe Destination Charges API (not Connect payouts)"
    - "Epic 3.4 requirements for order management"
    - "Customer service best practices"
    - "Migration 00048: Refund management tables"
    - "Migration 00049: Platform settings configuration"
    - "Migration 00050: Fee tiers and dynamic pricing system"

dev_agent_record:
  agent_model_used: "claude-opus-4-1-20250805"
  debug_log_references:
    - "Fee calculation math error identified and fixed"
    - "Security vulnerability in admin access resolved"
    - "Database constraint issues resolved with EXCLUDE"
  completion_notes:
    - "Implemented dynamic fee management system with admin controls"
    - "Created comprehensive refund management tables"
    - "Fixed critical math error: organizer receives full ticket price, not price minus fees"
    - "Added secure platform admin role management"
    - "Implemented audit logging for compliance"
  file_list:
    - "supabase/migrations/00048_add_refund_management_tables.sql"
    - "supabase/migrations/00049_add_platform_settings_table.sql"
    - "supabase/migrations/00050_fix_fee_tiers_currency.sql"
    - "supabase/migrations/00051_drop_duplicate_ticket_orders_table.sql"
    - "lib/supabase/database.types.ts (regenerated)"
  change_summary:
    - "Created refund management infrastructure with 4 new tables"
    - "Implemented dynamic fee system with tiered pricing"
    - "Added payout scheduling with fee adjustments"
    - "Secured admin access with platform_admins table"
    - "Added comprehensive audit logging"
    - "Fixed Stripe fee calculation to charge on buyer total"
    - "Created migration 00051 to drop duplicate ticket_orders table"
  test_results:
    - "Migrations successfully applied to database"
    - "TypeScript types regenerated and validated"
    - "Fee calculation formula verified for accuracy"
  deployment_notes: |
    CRITICAL:
    1. Must set STRIPE_WEBHOOK_SECRET in production environment
    2. Run migration 00051 to drop duplicate ticket_orders table
    3. Verify Stripe destination charges are configured correctly
    4. Platform receives fees, organizer receives full ticket price
    5. Stripe fees are rounded up (Math.ceil) per Stripe's standard practice