story:
  id: "STORY-003"
  title: "Database Schema Setup"
  epic: "Epic 1: Foundation & Core Infrastructure"
  priority: "P0-Critical"
  points: 3
  sprint: "Sprint 1"
  status: "Completed"

user_story:
  as_a: "developer"
  i_want: "a properly structured database schema"
  so_that: "I can store and retrieve all application data efficiently"

acceptance_criteria:
  - given: "I access Supabase SQL editor"
    when: "I run the schema creation script"
    then: "All tables are created without errors"
  - given: "Tables are created"
    when: "I check the structure"
    then: "All required columns and relationships exist"
  - given: "RLS is required"
    when: "I check table policies"
    then: "Row Level Security is enabled with proper policies"
  - given: "I need to test the schema"
    when: "I insert test data"
    then: "Data is stored and retrieved correctly"
  - given: "Users sign up"
    when: "A new auth user is created"
    then: "A profile is automatically generated"

technical_notes:
  - "Use UUID for all primary keys"
  - "Enable RLS on all tables"
  - "Use TIMESTAMPTZ for all timestamps"
  - "Create indexes for foreign keys and slugs"
  - "Use triggers for updated_at timestamps"
  - "Follow Supabase best practices"

dependencies:
  - "Story 002 completed (authentication system)"
  - "Supabase project accessible"

tasks:
  - [x] Create core tables
    - [x] Create communities table with all fields
    - [x] Create events table with relationships
    - [x] Create tickets table for purchases
    - [x] Add proper data types and constraints
  - [x] Set up relationships
    - [x] Add foreign key constraints
    - [x] Create junction tables if needed
    - [x] Verify cascade delete rules
    - [x] Test relationship integrity
  - [x] Enable Row Level Security
    - [x] Enable RLS on all tables
    - [x] Create public read policies where appropriate
    - [x] Create user-specific write policies
    - [x] Test policy effectiveness
  - [x] Create indexes
    - [x] Add index on community slugs
    - [x] Add index on event dates
    - [x] Add index on foreign keys
    - [x] Verify query performance
  - [x] Set up triggers
    - [x] Create updated_at trigger function
    - [x] Apply trigger to all tables
    - [x] Test trigger functionality
    - [x] Verify automatic timestamps work
  - [x] Generate TypeScript types
    - [x] Use Supabase CLI to generate types
    - [x] Create types file in lib/supabase
    - [x] Import types in relevant files
    - [x] Verify type safety

test_scenarios:
  - scenario: "Schema creation"
    steps:
      - "Drop all tables if exist"
      - "Run schema SQL script"
      - "Check Supabase dashboard"
    expected: "All tables created with correct structure"
  - scenario: "RLS policies"
    steps:
      - "Try to read communities as anonymous"
      - "Try to read as authenticated user"
      - "Try to write as non-owner"
    expected: "Policies enforce correct access control"
  - scenario: "Data insertion"
    steps:
      - "Insert a community"
      - "Insert an event for that community"
      - "Insert a ticket purchase"
    expected: "All data saved with proper relationships"
  - scenario: "Cascade deletion"
    steps:
      - "Create community with events"
      - "Delete the community"
    expected: "Related events are also deleted"
  - scenario: "Type generation"
    steps:
      - "Run supabase gen types"
      - "Import in TypeScript file"
    expected: "Full type safety with IntelliSense"

definition_of_done:
  - [x] Code complete and follows standards
  - [x] All tables created successfully
  - [x] RLS policies implemented and tested
  - [x] Indexes improve query performance
  - [x] Triggers work automatically
  - [x] TypeScript types generated
  - [x] Test data can be inserted
  - [x] Documentation updated with schema
  - [x] No SQL errors in execution

dev_agent_record:
  agent_model_used: "claude-opus-4-1-20250805"
  debug_log_references: []
  completion_notes:
    - "PHASE 1: Initial implementation"
    - "Added atomic ticket purchase function to prevent overselling"
    - "Implemented initial enum types for better type safety"
    - "Added full-text search capabilities with GIN indexes"
    - "Created orders table for payment tracking separation"
    - "Implemented check-in audit system with passes and checkins tables"
    - "PHASE 2: Enterprise-grade improvements (ChatGPT recommendations)"
    - "Added 3 new enum types: order_status, payment_provider, pass_status"
    - "Converted string fields to proper PostgreSQL enums"
    - "Added missing foreign keys (events.created_by, orders.buyer_id, checkins.scanned_by)"
    - "Implemented case-insensitive unique indexes for slugs and usernames"
    - "Created 23 performance indexes for hot query paths"
    - "Added unique constraints (one pass per ticket, unique QR codes)"
    - "Implemented RLS policies for all tables with proper access control"
    - "Added pg_trgm and unaccent extensions for better search"
    - "Created automatic search_tsv triggers for events and communities"
    - "PHASE 3: Type safety architecture"
    - "Generated 2500+ line database.types.ts with full type coverage"
    - "Created branded types system preventing ID confusion"
    - "Implemented repository pattern for clean data access"
    - "Added Zod validation schemas synced with database enums"
    - "Created type-safe RPC helpers and query builders"
    - "Added JSON sanitizer for undefined handling"
    - "Implemented exhaustiveness checking with assertNever"
  file_list:
    - "supabase/migrations/00001_initial_schema.sql"
    - "supabase/migrations/00002_complete_schema.sql"
    - "supabase/migrations/00003_schema_improvements.sql"
    - "supabase/migrations/00004_final_constraints_and_indexes.sql"
    - "supabase/migrations/00005_complete_rls_and_search.sql"
    - "supabase/CLAUDE.md (migration best practices)"
    - "lib/supabase/database.types.ts (auto-generated, 2500+ lines)"
    - "lib/supabase/db-helpers.ts (type helpers)"
    - "lib/supabase/type-utils.ts (advanced utilities)"
    - "lib/supabase/validation.ts (Zod schemas)"
    - "lib/supabase/branded-types.ts (branded type system)"
    - "lib/repositories/index.ts (repository pattern)"
    - "lib/utils/json.ts (JSON sanitizer)"
    - "app/api/example-usage.ts (API examples)"
    - "docs/DATABASE-ARCHITECTURE.md (complete documentation)"
  change_log:
    - "Migration 1: Initial schema with auth triggers"
    - "Migration 2: Complete schema with all tables, enums, functions"
    - "Migration 3: Converted text fields to enums, added FKs, case-insensitive indexes"
    - "Migration 4: Added unique constraints, performance indexes, enhanced RLS"
    - "Migration 5: Complete RLS policies, search triggers, extensions"
    - "Created comprehensive type safety layer with 7+ utility files"
    - "Implemented repository pattern with automatic validation"
    - "Added branded types preventing $25 vs 2500 cents confusion"
    - "Database now production-ready with enterprise-grade features"