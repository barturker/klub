story:
  id: "STORY-010"
  title: "Stripe Payment Integration"
  epic: "3 - Events & Ticketing System"
  priority: "P0-Critical"
  points: 5
  sprint: "3"
  status: "ready"
  assigned_to: "ai-developer"
  created_date: "2025-01-17"
  start_date: ""
  completion_date: ""

user_story:
  as_a: "community member"
  i_want: "to securely purchase event tickets"
  so_that: "I can attend events without payment concerns"

acceptance_criteria:
  - given: "I am an organizer"
    when: "I set up payments"
    then: "I can complete Stripe Connect onboarding"
  - given: "I am purchasing tickets"
    when: "I reach checkout"
    then: "I see payment form with card, Apple Pay, Google Pay options"
  - given: "My card requires authentication"
    when: "I submit payment"
    then: "3D Secure authentication is triggered when required"
  - given: "I complete a purchase"
    when: "Payment succeeds"
    then: "I receive payment confirmation with receipt email"
  - given: "An organizer makes a sale"
    when: "Payment is processed"
    then: "Klub fee (3%) and Stripe fees are automatically calculated"
  - given: "An organizer needs funds"
    when: "They request payout"
    then: "They can use instant payout option"
  - given: "Payment processing occurs"
    when: "Handling sensitive data"
    then: "PCI compliance is maintained throughout"
  - given: "A payment fails"
    when: "First attempt fails"
    then: "System retries payment with appropriate logic"

technical_specification:
  database_changes:
    - table: "stripe_accounts"
      changes: |
        CREATE TABLE stripe_accounts (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          community_id UUID REFERENCES communities(id) ON DELETE CASCADE UNIQUE NOT NULL,
          stripe_account_id TEXT UNIQUE NOT NULL,
          onboarding_completed BOOLEAN DEFAULT FALSE,
          charges_enabled BOOLEAN DEFAULT FALSE,
          payouts_enabled BOOLEAN DEFAULT FALSE,
          default_currency TEXT DEFAULT 'USD',
          country TEXT,
          business_type TEXT,
          metadata JSONB DEFAULT '{}',
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_stripe_accounts_community ON stripe_accounts(community_id);
        CREATE INDEX idx_stripe_accounts_stripe_id ON stripe_accounts(stripe_account_id);

    - table: "payment_intents"
      changes: |
        CREATE TABLE payment_intents (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          order_id UUID REFERENCES orders(id) ON DELETE CASCADE,
          stripe_payment_intent_id TEXT UNIQUE NOT NULL,
          stripe_account_id TEXT NOT NULL,
          amount_cents INTEGER NOT NULL,
          currency TEXT DEFAULT 'USD',
          status TEXT NOT NULL,
          payment_method_types TEXT[],
          metadata JSONB DEFAULT '{}',
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_payment_intents_order ON payment_intents(order_id);
        CREATE INDEX idx_payment_intents_stripe ON payment_intents(stripe_payment_intent_id);

    - table: "orders"
      changes: |
        -- Update orders table (from Sprint 3 overview)
        CREATE TABLE IF NOT EXISTS orders (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          event_id UUID REFERENCES events(id) ON DELETE CASCADE NOT NULL,
          buyer_id UUID REFERENCES auth.users NOT NULL,
          ticket_tier_id UUID REFERENCES ticket_tiers(id),
          quantity INTEGER NOT NULL DEFAULT 1,
          amount_cents INTEGER NOT NULL,
          fee_cents INTEGER NOT NULL DEFAULT 0,
          currency TEXT DEFAULT 'USD',
          status TEXT CHECK (status IN ('pending', 'processing', 'completed', 'failed', 'cancelled', 'refunded')) DEFAULT 'pending',
          stripe_payment_intent_id TEXT,
          stripe_charge_id TEXT,
          payment_method TEXT,
          buyer_email TEXT NOT NULL,
          buyer_name TEXT,
          metadata JSONB DEFAULT '{}',
          paid_at TIMESTAMPTZ,
          failed_at TIMESTAMPTZ,
          cancelled_at TIMESTAMPTZ,
          refunded_at TIMESTAMPTZ,
          created_at TIMESTAMPTZ DEFAULT NOW(),
          updated_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_orders_event ON orders(event_id);
        CREATE INDEX idx_orders_buyer ON orders(buyer_id);
        CREATE INDEX idx_orders_status ON orders(status);
        CREATE INDEX idx_orders_stripe_intent ON orders(stripe_payment_intent_id);

    - table: "order_items"
      changes: |
        CREATE TABLE order_items (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          order_id UUID REFERENCES orders(id) ON DELETE CASCADE NOT NULL,
          ticket_tier_id UUID REFERENCES ticket_tiers(id) NOT NULL,
          quantity INTEGER NOT NULL,
          unit_price_cents INTEGER NOT NULL,
          discount_cents INTEGER DEFAULT 0,
          created_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_order_items_order ON order_items(order_id);

    - table: "tickets"
      changes: |
        -- Create tickets table for purchased tickets
        CREATE TABLE IF NOT EXISTS tickets (
          id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
          order_id UUID REFERENCES orders(id) ON DELETE CASCADE NOT NULL,
          event_id UUID REFERENCES events(id) ON DELETE CASCADE NOT NULL,
          ticket_tier_id UUID REFERENCES ticket_tiers(id) NOT NULL,
          attendee_email TEXT NOT NULL,
          attendee_name TEXT,
          ticket_code TEXT UNIQUE NOT NULL,
          status TEXT CHECK (status IN ('valid', 'used', 'cancelled', 'refunded')) DEFAULT 'valid',
          checked_in_at TIMESTAMPTZ,
          metadata JSONB DEFAULT '{}',
          created_at TIMESTAMPTZ DEFAULT NOW()
        );
        CREATE INDEX idx_tickets_order ON tickets(order_id);
        CREATE INDEX idx_tickets_event ON tickets(event_id);
        CREATE INDEX idx_tickets_code ON tickets(ticket_code);

        -- RLS Policies
        ALTER TABLE stripe_accounts ENABLE ROW LEVEL SECURITY;
        ALTER TABLE payment_intents ENABLE ROW LEVEL SECURITY;
        ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
        ALTER TABLE order_items ENABLE ROW LEVEL SECURITY;
        ALTER TABLE tickets ENABLE ROW LEVEL SECURITY;

        -- Stripe account policies
        CREATE POLICY "Community admins can manage Stripe accounts"
        ON stripe_accounts FOR ALL
        USING (
          EXISTS (
            SELECT 1 FROM community_members cm
            WHERE cm.community_id = stripe_accounts.community_id
            AND cm.user_id = auth.uid()
            AND cm.role = 'admin'
          )
        );

        -- Order policies
        CREATE POLICY "Users can view their orders"
        ON orders FOR SELECT
        USING (buyer_id = auth.uid() OR EXISTS (
          SELECT 1 FROM events e
          JOIN community_members cm ON cm.community_id = e.community_id
          WHERE e.id = orders.event_id
          AND cm.user_id = auth.uid()
          AND cm.role IN ('admin', 'moderator')
        ));

        CREATE POLICY "Users can create orders"
        ON orders FOR INSERT
        WITH CHECK (buyer_id = auth.uid());

        -- Ticket policies
        CREATE POLICY "Users can view their tickets"
        ON tickets FOR SELECT
        USING (
          EXISTS (
            SELECT 1 FROM orders o
            WHERE o.id = tickets.order_id
            AND o.buyer_id = auth.uid()
          )
        );

  api_endpoints:
    - method: "POST"
      path: "/api/stripe/connect"
      purpose: "Start Stripe Connect onboarding"
      request_body:
        community_id: "uuid"
        return_url: "string"
        refresh_url: "string"
      response:
        onboarding_url: "string"
    - method: "GET"
      path: "/api/stripe/account-status"
      purpose: "Check Stripe account status"
      query_params:
        community_id: "uuid"
      response:
        connected: "boolean"
        charges_enabled: "boolean"
        payouts_enabled: "boolean"
        requirements: "array?"
    - method: "POST"
      path: "/api/checkout/create-intent"
      purpose: "Create payment intent"
      request_body:
        event_id: "uuid"
        ticket_tier_id: "uuid"
        quantity: "number"
        discount_code: "string?"
        buyer_email: "string"
        buyer_name: "string"
      response:
        order_id: "uuid"
        client_secret: "string"
        amount_cents: "number"
        fee_cents: "number"
    - method: "POST"
      path: "/api/checkout/confirm-payment"
      purpose: "Confirm payment completion"
      request_body:
        order_id: "uuid"
        payment_intent_id: "string"
      response:
        success: "boolean"
        tickets: "array"
        receipt_url: "string"
    - method: "POST"
      path: "/api/stripe/webhook"
      purpose: "Handle Stripe webhooks"
      headers:
        stripe-signature: "string"
      request_body: "Stripe webhook payload"
      response:
        received: "boolean"
    - method: "POST"
      path: "/api/checkout/retry-payment"
      purpose: "Retry failed payment"
      request_body:
        order_id: "uuid"
        payment_method_id: "string"
      response:
        client_secret: "string"
        status: "string"
    - method: "POST"
      path: "/api/stripe/payout"
      purpose: "Request instant payout"
      request_body:
        community_id: "uuid"
        amount_cents: "number?"
      response:
        payout_id: "string"
        arrival_date: "timestamp"
    - method: "GET"
      path: "/api/stripe/balance"
      purpose: "Get Stripe balance"
      query_params:
        community_id: "uuid"
      response:
        available: "number"
        pending: "number"
        currency: "string"

  components:
    - name: "StripeProvider"
      type: "component"
      path: "/components/checkout/StripeProvider.tsx"
      purpose: "Stripe Elements provider wrapper"
    - name: "CheckoutForm"
      type: "component"
      path: "/components/checkout/CheckoutForm.tsx"
      purpose: "Main checkout form with payment element"
    - name: "PaymentElement"
      type: "component"
      path: "/components/checkout/PaymentElement.tsx"
      purpose: "Stripe Payment Element integration"
    - name: "CheckoutSummary"
      type: "component"
      path: "/components/checkout/CheckoutSummary.tsx"
      purpose: "Order summary with fee breakdown"
    - name: "PaymentStatus"
      type: "component"
      path: "/components/checkout/PaymentStatus.tsx"
      purpose: "Payment processing status display"
    - name: "PaymentSuccess"
      type: "component"
      path: "/components/checkout/PaymentSuccess.tsx"
      purpose: "Success page with ticket details"
    - name: "StripeOnboarding"
      type: "component"
      path: "/components/stripe/StripeOnboarding.tsx"
      purpose: "Stripe Connect onboarding flow"
    - name: "StripeAccountStatus"
      type: "component"
      path: "/components/stripe/StripeAccountStatus.tsx"
      purpose: "Display Stripe account status"
    - name: "PayoutDashboard"
      type: "component"
      path: "/components/stripe/PayoutDashboard.tsx"
      purpose: "Manage payouts and view balance"
    - name: "CheckoutPage"
      type: "page"
      path: "/app/checkout/[eventId]/page.tsx"
      purpose: "Checkout page for ticket purchase"
    - name: "PaymentSuccessPage"
      type: "page"
      path: "/app/checkout/success/page.tsx"
      purpose: "Payment success confirmation page"
    - name: "StripeConnectPage"
      type: "page"
      path: "/app/(dashboard)/communities/[slug]/stripe/page.tsx"
      purpose: "Stripe Connect management page"
    - name: "stripeClient"
      type: "lib"
      path: "/lib/stripe/client.ts"
      purpose: "Stripe client configuration"
    - name: "stripeServer"
      type: "lib"
      path: "/lib/stripe/server.ts"
      purpose: "Server-side Stripe utilities"
    - name: "usePaymentStore"
      type: "hook"
      path: "/hooks/usePaymentStore.ts"
      purpose: "Zustand store for payment flow state"
    - name: "usePaymentStatus"
      type: "hook"
      path: "/hooks/usePaymentStatus.ts"
      purpose: "TanStack Query hook for payment polling"
    - name: "useFeeCalculation"
      type: "hook"
      path: "/hooks/useFeeCalculation.ts"
      purpose: "Fee calculations with Dinero.js"

  libraries_required:
    - name: "stripe"
      version: "^18.5.0"
      purpose: "Stripe API SDK (already installed)"
    - name: "@stripe/stripe-js"
      version: "^7.9.0"
      purpose: "Client-side Stripe (already installed)"
    - name: "@stripe/react-stripe-js"
      version: "^2.4.0"
      purpose: "React Stripe components"
    - name: "@tanstack/react-query"
      version: "^5.28.4"
      purpose: "Payment status polling and caching"
    - name: "zustand"
      version: "^4.5.2"
      purpose: "Payment flow state management"
    - name: "dinero.js"
      version: "^2.0.0-alpha.14"
      purpose: "Precise fee calculations"

  environment_variables:
    - name: "STRIPE_PUBLISHABLE_KEY"
      purpose: "Public key for client-side"
    - name: "STRIPE_SECRET_KEY"
      purpose: "Secret key for server-side"
    - name: "STRIPE_WEBHOOK_SECRET"
      purpose: "Webhook endpoint secret"
    - name: "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY"
      purpose: "Client-accessible public key"

implementation_plan:
  estimated_hours: 7
  phases:
    - phase: "Database & Configuration"
      tasks:
        - [ ] Create database tables
        - [ ] Set up RLS policies
        - [ ] Configure Stripe environment variables
        - [ ] Set up webhook endpoint
    - phase: "Stripe Connect"
      tasks:
        - [ ] Build onboarding flow
        - [ ] Create account status checker
        - [ ] Implement requirements display
        - [ ] Handle return from Stripe
    - phase: "Payment Intent Creation"
      tasks:
        - [ ] Create checkout API endpoint with validation
        - [ ] Calculate fees and totals using Dinero.js
        - [ ] Generate payment intent with Stripe SDK
        - [ ] Handle metadata and tracking
    - phase: "Checkout UI"
      tasks:
        - [ ] Integrate Payment Element with React Stripe.js
        - [ ] Build checkout form with Zustand state management
        - [ ] Add address collection with validation
        - [ ] Implement 3D Secure handling with status polling
    - phase: "Payment Processing"
      tasks:
        - [ ] Handle webhook events with signature validation
        - [ ] Update order status with TanStack Query mutations
        - [ ] Generate tickets with QR codes
        - [ ] Send confirmation emails with receipts
    - phase: "Payout Management"
      tasks:
        - [ ] Build balance display
        - [ ] Implement instant payouts
        - [ ] Add payout history
        - [ ] Handle payout failures
    - phase: "Testing & Security"
      tasks:
        - [ ] Test payment flows
        - [ ] Verify webhook signatures
        - [ ] Check PCI compliance
        - [ ] Test retry logic

dependencies:
  blocking: ["STORY-008", "STORY-009"]
  blocked_by: []
  external: ["Stripe Account", "Stripe API Keys"]

test_scenarios:
  unit_tests:
    - component: "FeeCalculator"
      test: "Calculate platform and Stripe fees"
      expected: "Correct fee breakdown"
    - component: "WebhookHandler"
      test: "Verify webhook signature"
      expected: "Invalid signatures rejected"
  integration_tests:
    - scenario: "Complete purchase flow"
      steps:
        - "Select tickets"
        - "Enter payment details"
        - "Complete 3D Secure"
        - "Receive confirmation"
      expected: "Tickets generated and email sent"
    - scenario: "Failed payment retry"
      steps:
        - "Initial payment fails"
        - "Update payment method"
        - "Retry payment"
      expected: "Payment succeeds on retry"
  edge_cases:
    - scenario: "Network failure during payment"
      steps:
        - "Payment initiated"
        - "Network disconnects"
        - "Webhook received later"
      expected: "Order updated correctly via webhook"
    - scenario: "Concurrent purchases of limited tickets"
      steps:
        - "Two users buy last ticket simultaneously"
      expected: "Only one succeeds, other gets appropriate error"

performance_requirements:
  - metric: "Payment intent creation"
    target: "<1s"
  - metric: "Webhook processing"
    target: "<500ms"
  - metric: "Checkout page load"
    target: "<2s"

security_considerations:
  - aspect: "PCI Compliance"
    requirement: "Never store card details, use Stripe Elements"
  - aspect: "Webhook verification"
    requirement: "Always verify webhook signatures"
  - aspect: "API key security"
    requirement: "Never expose secret keys to client"
  - aspect: "HTTPS only"
    requirement: "All payment pages must use HTTPS"
  - aspect: "Idempotency"
    requirement: "Implement idempotency keys for retries"

definition_of_done:
  development:
    - [ ] Code complete and follows standards
    - [ ] TypeScript types defined
    - [ ] Error handling implemented
    - [ ] Loading states implemented
    - [ ] Mobile responsive
  testing:
    - [ ] Unit tests written and passing
    - [ ] Integration tests passing
    - [ ] Manual testing completed
    - [ ] Test mode transactions verified
  documentation:
    - [ ] Code comments added
    - [ ] API documentation updated
    - [ ] Payment flow documented
  review:
    - [ ] Code reviewed and approved
    - [ ] Security review passed
    - [ ] PCI compliance verified
  deployment:
    - [ ] Deployed to staging
    - [ ] Webhook endpoint configured
    - [ ] Test transactions successful
    - [ ] No P0 or P1 bugs

rollback_plan:
  - step: "Disable checkout UI"
  - step: "Stop webhook processing"
  - step: "Refund pending transactions"
  - step: "Notify affected users"

monitoring:
  metrics_to_track:
    - "Payment success rate"
    - "Average checkout time"
    - "3D Secure trigger rate"
    - "Webhook processing time"
    - "Failed payment reasons"
  alerts_to_setup:
    - "Payment success rate < 90%"
    - "Webhook failures > 1%"
    - "Stripe API errors > 5/min"
    - "Payment processing time > 5s"
  logs_to_implement:
    - "All payment attempts"
    - "Webhook events received"
    - "Fee calculations"
    - "Stripe API calls"

dev_notes:
  implementation_tips:
    - "Use Stripe's Payment Element for automatic payment method support"
    - "Implement webhook handlers for all critical events"
    - "Use idempotency keys to prevent duplicate charges"
    - "Store minimal payment data, rely on Stripe for details"
    - "Test with Stripe test cards and 3D Secure test cards"
  tech_stack_references:
    - "Stripe 18.5.0 SDK [Source: architecture/tech-stack.md]"
    - "@stripe/stripe-js 7.9.0 [Source: architecture/tech-stack.md]"
    - "Next.js API routes for webhooks [Source: architecture/tech-stack.md]"
    - "Supabase for order storage [Source: architecture/tech-stack.md]"
  database_references:
    - "Orders table structure [Source: architecture/supabase-database-schema.md]"
    - "Events and ticket_tiers from previous stories"
    - "RLS policies for security [Source: architecture/supabase-database-schema.md]"
  previous_story_context:
    - "Event creation (STORY-008) provides event structure"
    - "Ticket tiers (STORY-009) provides pricing structure"
    - "Price calculation function from STORY-009"
  stripe_integration_notes:
    - "Use Connect for marketplace model"
    - "Platform fee: 3% of transaction"
    - "Stripe fee: 2.9% + $0.30"
    - "Support for 135+ currencies"
    - "Automatic tax calculation available"
  potential_issues:
    - "Webhook delivery - implement retry queue"
    - "Currency conversion - use Stripe's rates"
    - "Refund timing - handle async refunds"
    - "Network issues - implement proper error handling"
  references:
    - "Stripe Connect documentation"
    - "PCI compliance requirements"
    - "App Store payment guidelines"

dev_agent_record:
  agent_model_used: ""
  debug_log_references: []
  completion_notes: []
  file_list: []
  change_summary: []
  test_results: []
  deployment_notes: ""